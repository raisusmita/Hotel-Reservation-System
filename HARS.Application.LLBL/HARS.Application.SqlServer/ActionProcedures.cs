//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.6.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Data;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace HARS.Application.LLBL.SqlServer
{
	/// <summary>Class which contains the static logic to execute action stored procedures in the database.</summary>
	public static partial class ActionProcedures
	{
		/// <summary>Delegate definition for stored procedure 'SpBookingDel' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpBookingDelCallBack(System.Int32 bookingId, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpBookingIns' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpBookingInsCallBack(System.String booking, ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpBookingUpd' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpBookingUpdCallBack(System.String booking, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpBranchDel' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpBranchDelCallBack(System.Int32 branchId, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'spBranchIns' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpBranchInsCallBack(System.String branch, ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpBranchUpd' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpBranchUpdCallBack(System.String branch, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpCustomerDel' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpCustomerDelCallBack(System.Int32 customerId, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'spCustomerIns' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpCustomerInsCallBack(System.String customer, ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpCustomerUpd' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpCustomerUpdCallBack(System.String customer, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpHotelDel' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpHotelDelCallBack(System.Int32 hotelId, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpHotelIns' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpHotelInsCallBack(System.String hotel, ref System.Int32 hotelId, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpHotelUpd' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpHotelUpdCallBack(System.String hotel, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpInvoiceDel' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpInvoiceDelCallBack(System.Int32 invoiceId, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpReservationDel' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpReservationDelCallBack(System.Int32 reservationId, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpReservationIns' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpReservationInsCallBack(System.String reservation, ref System.Int32 reservationId, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpReservationUpd' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpReservationUpdCallBack(System.String reservation, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpRoomDel' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpRoomDelCallBack(System.Int32 roomId, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'spRoomIns' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpRoomInsCallBack(System.String room, ref System.Int32 roomId, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpRoomUpd' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpRoomUpdCallBack(System.String room, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpSeasonDel' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpSeasonDelCallBack(System.Int32 seasonId, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpSeasonIns' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpSeasonInsCallBack(System.String season, ref System.Int32 seasonId, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpSeasonUpd' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpSeasonUpdCallBack(System.String season, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpServiceCategoryDel' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpServiceCategoryDelCallBack(System.Int32 serviceCategoryId, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'spServiceCategoryIns' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpServiceCategoryInsCallBack(System.String serviceCategory, ref System.Int32 serviceCategoryId, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpServiceCategoryUpd' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpServiceCategoryUpdCallBack(System.String serviceCategory, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpServiceDel' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpServiceDelCallBack(System.Int32 serviceId, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'spServiceIns' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpServiceInsCallBack(System.String service, ref System.Int32 serviceId, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpServiceUpd' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpServiceUpdCallBack(System.String service, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpTransactionDel' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpTransactionDelCallBack(System.Int32 transactionId, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpTransactionIns' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpTransactionInsCallBack(System.Int32 reservationId, ref System.Int32 transactionId, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpTransactionUpd' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpTransactionUpdCallBack(System.String transaction, IDataAccessCore dataAccessProvider);

		/// <summary>Calls stored procedure 'SpBookingDel'.<br/><br/></summary>
		/// <param name="bookingId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBookingDel(System.Int32 bookingId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpBookingDel(bookingId, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpBookingDel'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="bookingId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBookingDel(System.Int32 bookingId, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpBookingDelCall(dataAccessProvider, bookingId))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpBookingIns'.<br/><br/></summary>
		/// <param name="booking">Input parameter. </param>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBookingIns(System.String booking, ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpBookingIns(booking, ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpBookingIns'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="booking">Input parameter. </param>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBookingIns(System.String booking, ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpBookingInsCall(dataAccessProvider, booking, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(1);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpBookingUpd'.<br/><br/></summary>
		/// <param name="booking">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBookingUpd(System.String booking)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpBookingUpd(booking, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpBookingUpd'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="booking">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBookingUpd(System.String booking, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpBookingUpdCall(dataAccessProvider, booking))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpBranchDel'.<br/><br/></summary>
		/// <param name="branchId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBranchDel(System.Int32 branchId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpBranchDel(branchId, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpBranchDel'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="branchId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBranchDel(System.Int32 branchId, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpBranchDelCall(dataAccessProvider, branchId))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'spBranchIns'.<br/><br/></summary>
		/// <param name="branch">Input parameter. </param>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBranchIns(System.String branch, ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpBranchIns(branch, ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'spBranchIns'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="branch">Input parameter. </param>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBranchIns(System.String branch, ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpBranchInsCall(dataAccessProvider, branch, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(1);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpBranchUpd'.<br/><br/></summary>
		/// <param name="branch">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBranchUpd(System.String branch)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpBranchUpd(branch, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpBranchUpd'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="branch">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBranchUpd(System.String branch, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpBranchUpdCall(dataAccessProvider, branch))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerDel'.<br/><br/></summary>
		/// <param name="customerId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpCustomerDel(System.Int32 customerId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpCustomerDel(customerId, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerDel'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="customerId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpCustomerDel(System.Int32 customerId, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpCustomerDelCall(dataAccessProvider, customerId))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'spCustomerIns'.<br/><br/></summary>
		/// <param name="customer">Input parameter. </param>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpCustomerIns(System.String customer, ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpCustomerIns(customer, ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'spCustomerIns'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="customer">Input parameter. </param>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpCustomerIns(System.String customer, ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpCustomerInsCall(dataAccessProvider, customer, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(1);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerUpd'.<br/><br/></summary>
		/// <param name="customer">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpCustomerUpd(System.String customer)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpCustomerUpd(customer, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpCustomerUpd'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="customer">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpCustomerUpd(System.String customer, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpCustomerUpdCall(dataAccessProvider, customer))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpHotelDel'.<br/><br/></summary>
		/// <param name="hotelId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpHotelDel(System.Int32 hotelId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpHotelDel(hotelId, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpHotelDel'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="hotelId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpHotelDel(System.Int32 hotelId, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpHotelDelCall(dataAccessProvider, hotelId))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpHotelIns'.<br/><br/></summary>
		/// <param name="hotel">Input parameter. </param>
		/// <param name="hotelId">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpHotelIns(System.String hotel, ref System.Int32 hotelId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpHotelIns(hotel, ref hotelId, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpHotelIns'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="hotel">Input parameter. </param>
		/// <param name="hotelId">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpHotelIns(System.String hotel, ref System.Int32 hotelId, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpHotelInsCall(dataAccessProvider, hotel, hotelId))
			{
				int toReturn = call.Call();
				hotelId = call.GetParameterValue<System.Int32>(1);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpHotelUpd'.<br/><br/></summary>
		/// <param name="hotel">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpHotelUpd(System.String hotel)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpHotelUpd(hotel, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpHotelUpd'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="hotel">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpHotelUpd(System.String hotel, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpHotelUpdCall(dataAccessProvider, hotel))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpInvoiceDel'.<br/><br/></summary>
		/// <param name="invoiceId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpInvoiceDel(System.Int32 invoiceId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpInvoiceDel(invoiceId, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpInvoiceDel'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="invoiceId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpInvoiceDel(System.Int32 invoiceId, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpInvoiceDelCall(dataAccessProvider, invoiceId))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpReservationDel'.<br/><br/></summary>
		/// <param name="reservationId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpReservationDel(System.Int32 reservationId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpReservationDel(reservationId, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpReservationDel'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="reservationId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpReservationDel(System.Int32 reservationId, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpReservationDelCall(dataAccessProvider, reservationId))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpReservationIns'.<br/><br/></summary>
		/// <param name="reservation">Input parameter. </param>
		/// <param name="reservationId">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpReservationIns(System.String reservation, ref System.Int32 reservationId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpReservationIns(reservation, ref reservationId, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpReservationIns'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="reservation">Input parameter. </param>
		/// <param name="reservationId">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpReservationIns(System.String reservation, ref System.Int32 reservationId, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpReservationInsCall(dataAccessProvider, reservation, reservationId))
			{
				int toReturn = call.Call();
				reservationId = call.GetParameterValue<System.Int32>(1);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpReservationUpd'.<br/><br/></summary>
		/// <param name="reservation">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpReservationUpd(System.String reservation)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpReservationUpd(reservation, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpReservationUpd'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="reservation">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpReservationUpd(System.String reservation, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpReservationUpdCall(dataAccessProvider, reservation))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpRoomDel'.<br/><br/></summary>
		/// <param name="roomId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpRoomDel(System.Int32 roomId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpRoomDel(roomId, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpRoomDel'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="roomId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpRoomDel(System.Int32 roomId, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpRoomDelCall(dataAccessProvider, roomId))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'spRoomIns'.<br/><br/></summary>
		/// <param name="room">Input parameter. </param>
		/// <param name="roomId">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpRoomIns(System.String room, ref System.Int32 roomId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpRoomIns(room, ref roomId, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'spRoomIns'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="room">Input parameter. </param>
		/// <param name="roomId">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpRoomIns(System.String room, ref System.Int32 roomId, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpRoomInsCall(dataAccessProvider, room, roomId))
			{
				int toReturn = call.Call();
				roomId = call.GetParameterValue<System.Int32>(1);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpRoomUpd'.<br/><br/></summary>
		/// <param name="room">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpRoomUpd(System.String room)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpRoomUpd(room, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpRoomUpd'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="room">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpRoomUpd(System.String room, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpRoomUpdCall(dataAccessProvider, room))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpSeasonDel'.<br/><br/></summary>
		/// <param name="seasonId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpSeasonDel(System.Int32 seasonId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpSeasonDel(seasonId, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpSeasonDel'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="seasonId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpSeasonDel(System.Int32 seasonId, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpSeasonDelCall(dataAccessProvider, seasonId))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpSeasonIns'.<br/><br/></summary>
		/// <param name="season">Input parameter. </param>
		/// <param name="seasonId">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpSeasonIns(System.String season, ref System.Int32 seasonId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpSeasonIns(season, ref seasonId, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpSeasonIns'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="season">Input parameter. </param>
		/// <param name="seasonId">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpSeasonIns(System.String season, ref System.Int32 seasonId, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpSeasonInsCall(dataAccessProvider, season, seasonId))
			{
				int toReturn = call.Call();
				seasonId = call.GetParameterValue<System.Int32>(1);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpSeasonUpd'.<br/><br/></summary>
		/// <param name="season">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpSeasonUpd(System.String season)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpSeasonUpd(season, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpSeasonUpd'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="season">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpSeasonUpd(System.String season, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpSeasonUpdCall(dataAccessProvider, season))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpServiceCategoryDel'.<br/><br/></summary>
		/// <param name="serviceCategoryId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpServiceCategoryDel(System.Int32 serviceCategoryId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpServiceCategoryDel(serviceCategoryId, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpServiceCategoryDel'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="serviceCategoryId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpServiceCategoryDel(System.Int32 serviceCategoryId, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpServiceCategoryDelCall(dataAccessProvider, serviceCategoryId))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'spServiceCategoryIns'.<br/><br/></summary>
		/// <param name="serviceCategory">Input parameter. </param>
		/// <param name="serviceCategoryId">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpServiceCategoryIns(System.String serviceCategory, ref System.Int32 serviceCategoryId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpServiceCategoryIns(serviceCategory, ref serviceCategoryId, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'spServiceCategoryIns'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="serviceCategory">Input parameter. </param>
		/// <param name="serviceCategoryId">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpServiceCategoryIns(System.String serviceCategory, ref System.Int32 serviceCategoryId, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpServiceCategoryInsCall(dataAccessProvider, serviceCategory, serviceCategoryId))
			{
				int toReturn = call.Call();
				serviceCategoryId = call.GetParameterValue<System.Int32>(1);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpServiceCategoryUpd'.<br/><br/></summary>
		/// <param name="serviceCategory">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpServiceCategoryUpd(System.String serviceCategory)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpServiceCategoryUpd(serviceCategory, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpServiceCategoryUpd'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="serviceCategory">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpServiceCategoryUpd(System.String serviceCategory, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpServiceCategoryUpdCall(dataAccessProvider, serviceCategory))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpServiceDel'.<br/><br/></summary>
		/// <param name="serviceId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpServiceDel(System.Int32 serviceId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpServiceDel(serviceId, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpServiceDel'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="serviceId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpServiceDel(System.Int32 serviceId, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpServiceDelCall(dataAccessProvider, serviceId))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'spServiceIns'.<br/><br/></summary>
		/// <param name="service">Input parameter. </param>
		/// <param name="serviceId">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpServiceIns(System.String service, ref System.Int32 serviceId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpServiceIns(service, ref serviceId, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'spServiceIns'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="service">Input parameter. </param>
		/// <param name="serviceId">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpServiceIns(System.String service, ref System.Int32 serviceId, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpServiceInsCall(dataAccessProvider, service, serviceId))
			{
				int toReturn = call.Call();
				serviceId = call.GetParameterValue<System.Int32>(1);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpServiceUpd'.<br/><br/></summary>
		/// <param name="service">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpServiceUpd(System.String service)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpServiceUpd(service, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpServiceUpd'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="service">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpServiceUpd(System.String service, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpServiceUpdCall(dataAccessProvider, service))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpTransactionDel'.<br/><br/></summary>
		/// <param name="transactionId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpTransactionDel(System.Int32 transactionId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpTransactionDel(transactionId, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpTransactionDel'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="transactionId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpTransactionDel(System.Int32 transactionId, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpTransactionDelCall(dataAccessProvider, transactionId))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpTransactionIns'.<br/><br/></summary>
		/// <param name="reservationId">Input parameter. </param>
		/// <param name="transactionId">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpTransactionIns(System.Int32 reservationId, ref System.Int32 transactionId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpTransactionIns(reservationId, ref transactionId, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpTransactionIns'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="reservationId">Input parameter. </param>
		/// <param name="transactionId">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpTransactionIns(System.Int32 reservationId, ref System.Int32 transactionId, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpTransactionInsCall(dataAccessProvider, reservationId, transactionId))
			{
				int toReturn = call.Call();
				transactionId = call.GetParameterValue<System.Int32>(1);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpTransactionUpd'.<br/><br/></summary>
		/// <param name="transaction">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpTransactionUpd(System.String transaction)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpTransactionUpd(transaction, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpTransactionUpd'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="transaction">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpTransactionUpd(System.String transaction, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateSpTransactionUpdCall(dataAccessProvider, transaction))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Creates the call object for the call 'SpBookingDel' to stored procedure 'SpBookingDel'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="bookingId">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpBookingDelCall(IDataAccessCore dataAccessProvider, System.Int32 bookingId)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpBookingDel]", "SpBookingDel")
							.AddParameter("@BookingId", "Int", 0, ParameterDirection.Input, true, 10, 0, bookingId);
		}

		/// <summary>Creates the call object for the call 'SpBookingIns' to stored procedure 'SpBookingIns'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="booking">Input parameter</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpBookingInsCall(IDataAccessCore dataAccessProvider, System.String booking, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpBookingIns]", "SpBookingIns")
							.AddParameter("@Booking", "VarChar", 2147483647, ParameterDirection.Input, true, 0, 0, booking)
							.AddParameter("@json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpBookingUpd' to stored procedure 'SpBookingUpd'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="booking">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpBookingUpdCall(IDataAccessCore dataAccessProvider, System.String booking)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpBookingUpd]", "SpBookingUpd")
							.AddParameter("@Booking", "VarChar", 2147483647, ParameterDirection.Input, true, 0, 0, booking);
		}

		/// <summary>Creates the call object for the call 'SpBranchDel' to stored procedure 'SpBranchDel'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="branchId">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpBranchDelCall(IDataAccessCore dataAccessProvider, System.Int32 branchId)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpBranchDel]", "SpBranchDel")
							.AddParameter("@BranchId", "Int", 0, ParameterDirection.Input, true, 10, 0, branchId);
		}

		/// <summary>Creates the call object for the call 'SpBranchIns' to stored procedure 'spBranchIns'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="branch">Input parameter</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpBranchInsCall(IDataAccessCore dataAccessProvider, System.String branch, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[spBranchIns]", "SpBranchIns")
							.AddParameter("@Branch", "VarChar", 2147483647, ParameterDirection.Input, true, 0, 0, branch)
							.AddParameter("@json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpBranchUpd' to stored procedure 'SpBranchUpd'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="branch">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpBranchUpdCall(IDataAccessCore dataAccessProvider, System.String branch)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpBranchUpd]", "SpBranchUpd")
							.AddParameter("@Branch", "VarChar", 2147483647, ParameterDirection.Input, true, 0, 0, branch);
		}

		/// <summary>Creates the call object for the call 'SpCustomerDel' to stored procedure 'SpCustomerDel'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="customerId">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpCustomerDelCall(IDataAccessCore dataAccessProvider, System.Int32 customerId)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpCustomerDel]", "SpCustomerDel")
							.AddParameter("@CustomerId", "Int", 0, ParameterDirection.Input, true, 10, 0, customerId);
		}

		/// <summary>Creates the call object for the call 'SpCustomerIns' to stored procedure 'spCustomerIns'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="customer">Input parameter</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpCustomerInsCall(IDataAccessCore dataAccessProvider, System.String customer, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[spCustomerIns]", "SpCustomerIns")
							.AddParameter("@Customer", "VarChar", 2147483647, ParameterDirection.Input, true, 0, 0, customer)
							.AddParameter("@json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpCustomerUpd' to stored procedure 'SpCustomerUpd'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="customer">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpCustomerUpdCall(IDataAccessCore dataAccessProvider, System.String customer)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpCustomerUpd]", "SpCustomerUpd")
							.AddParameter("@Customer", "VarChar", 2147483647, ParameterDirection.Input, true, 0, 0, customer);
		}

		/// <summary>Creates the call object for the call 'SpHotelDel' to stored procedure 'SpHotelDel'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="hotelId">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpHotelDelCall(IDataAccessCore dataAccessProvider, System.Int32 hotelId)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpHotelDel]", "SpHotelDel")
							.AddParameter("@HotelId", "Int", 0, ParameterDirection.Input, true, 10, 0, hotelId);
		}

		/// <summary>Creates the call object for the call 'SpHotelIns' to stored procedure 'SpHotelIns'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="hotel">Input parameter</param>
		/// <param name="hotelId">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpHotelInsCall(IDataAccessCore dataAccessProvider, System.String hotel, System.Int32 hotelId)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpHotelIns]", "SpHotelIns")
							.AddParameter("@Hotel", "VarChar", 2147483647, ParameterDirection.Input, true, 0, 0, hotel)
							.AddParameter("@HotelId", "Int", 0, ParameterDirection.InputOutput, true, 10, 0, hotelId);
		}

		/// <summary>Creates the call object for the call 'SpHotelUpd' to stored procedure 'SpHotelUpd'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="hotel">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpHotelUpdCall(IDataAccessCore dataAccessProvider, System.String hotel)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpHotelUpd]", "SpHotelUpd")
							.AddParameter("@Hotel", "VarChar", 2147483647, ParameterDirection.Input, true, 0, 0, hotel);
		}

		/// <summary>Creates the call object for the call 'SpInvoiceDel' to stored procedure 'SpInvoiceDel'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="invoiceId">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpInvoiceDelCall(IDataAccessCore dataAccessProvider, System.Int32 invoiceId)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpInvoiceDel]", "SpInvoiceDel")
							.AddParameter("@InvoiceId", "Int", 0, ParameterDirection.Input, true, 10, 0, invoiceId);
		}

		/// <summary>Creates the call object for the call 'SpReservationDel' to stored procedure 'SpReservationDel'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="reservationId">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpReservationDelCall(IDataAccessCore dataAccessProvider, System.Int32 reservationId)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpReservationDel]", "SpReservationDel")
							.AddParameter("@ReservationId", "Int", 0, ParameterDirection.Input, true, 10, 0, reservationId);
		}

		/// <summary>Creates the call object for the call 'SpReservationIns' to stored procedure 'SpReservationIns'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="reservation">Input parameter</param>
		/// <param name="reservationId">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpReservationInsCall(IDataAccessCore dataAccessProvider, System.String reservation, System.Int32 reservationId)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpReservationIns]", "SpReservationIns")
							.AddParameter("@Reservation", "VarChar", 2147483647, ParameterDirection.Input, true, 0, 0, reservation)
							.AddParameter("@ReservationId", "Int", 0, ParameterDirection.InputOutput, true, 10, 0, reservationId);
		}

		/// <summary>Creates the call object for the call 'SpReservationUpd' to stored procedure 'SpReservationUpd'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="reservation">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpReservationUpdCall(IDataAccessCore dataAccessProvider, System.String reservation)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpReservationUpd]", "SpReservationUpd")
							.AddParameter("@Reservation", "VarChar", 2147483647, ParameterDirection.Input, true, 0, 0, reservation);
		}

		/// <summary>Creates the call object for the call 'SpRoomDel' to stored procedure 'SpRoomDel'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="roomId">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpRoomDelCall(IDataAccessCore dataAccessProvider, System.Int32 roomId)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpRoomDel]", "SpRoomDel")
							.AddParameter("@RoomId", "Int", 0, ParameterDirection.Input, true, 10, 0, roomId);
		}

		/// <summary>Creates the call object for the call 'SpRoomIns' to stored procedure 'spRoomIns'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="room">Input parameter</param>
		/// <param name="roomId">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpRoomInsCall(IDataAccessCore dataAccessProvider, System.String room, System.Int32 roomId)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[spRoomIns]", "SpRoomIns")
							.AddParameter("@Room", "VarChar", 2147483647, ParameterDirection.Input, true, 0, 0, room)
							.AddParameter("@RoomId", "Int", 0, ParameterDirection.InputOutput, true, 10, 0, roomId);
		}

		/// <summary>Creates the call object for the call 'SpRoomUpd' to stored procedure 'SpRoomUpd'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="room">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpRoomUpdCall(IDataAccessCore dataAccessProvider, System.String room)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpRoomUpd]", "SpRoomUpd")
							.AddParameter("@Room", "VarChar", 2147483647, ParameterDirection.Input, true, 0, 0, room);
		}

		/// <summary>Creates the call object for the call 'SpSeasonDel' to stored procedure 'SpSeasonDel'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="seasonId">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpSeasonDelCall(IDataAccessCore dataAccessProvider, System.Int32 seasonId)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpSeasonDel]", "SpSeasonDel")
							.AddParameter("@SeasonId", "Int", 0, ParameterDirection.Input, true, 10, 0, seasonId);
		}

		/// <summary>Creates the call object for the call 'SpSeasonIns' to stored procedure 'SpSeasonIns'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="season">Input parameter</param>
		/// <param name="seasonId">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpSeasonInsCall(IDataAccessCore dataAccessProvider, System.String season, System.Int32 seasonId)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpSeasonIns]", "SpSeasonIns")
							.AddParameter("@Season", "VarChar", 2147483647, ParameterDirection.Input, true, 0, 0, season)
							.AddParameter("@SeasonId", "Int", 0, ParameterDirection.InputOutput, true, 10, 0, seasonId);
		}

		/// <summary>Creates the call object for the call 'SpSeasonUpd' to stored procedure 'SpSeasonUpd'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="season">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpSeasonUpdCall(IDataAccessCore dataAccessProvider, System.String season)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpSeasonUpd]", "SpSeasonUpd")
							.AddParameter("@Season", "VarChar", 2147483647, ParameterDirection.Input, true, 0, 0, season);
		}

		/// <summary>Creates the call object for the call 'SpServiceCategoryDel' to stored procedure 'SpServiceCategoryDel'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="serviceCategoryId">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpServiceCategoryDelCall(IDataAccessCore dataAccessProvider, System.Int32 serviceCategoryId)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpServiceCategoryDel]", "SpServiceCategoryDel")
							.AddParameter("@ServiceCategoryId", "Int", 0, ParameterDirection.Input, true, 10, 0, serviceCategoryId);
		}

		/// <summary>Creates the call object for the call 'SpServiceCategoryIns' to stored procedure 'spServiceCategoryIns'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="serviceCategory">Input parameter</param>
		/// <param name="serviceCategoryId">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpServiceCategoryInsCall(IDataAccessCore dataAccessProvider, System.String serviceCategory, System.Int32 serviceCategoryId)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[spServiceCategoryIns]", "SpServiceCategoryIns")
							.AddParameter("@ServiceCategory", "VarChar", 2147483647, ParameterDirection.Input, true, 0, 0, serviceCategory)
							.AddParameter("@ServiceCategoryId", "Int", 0, ParameterDirection.InputOutput, true, 10, 0, serviceCategoryId);
		}

		/// <summary>Creates the call object for the call 'SpServiceCategoryUpd' to stored procedure 'SpServiceCategoryUpd'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="serviceCategory">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpServiceCategoryUpdCall(IDataAccessCore dataAccessProvider, System.String serviceCategory)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpServiceCategoryUpd]", "SpServiceCategoryUpd")
							.AddParameter("@ServiceCategory", "VarChar", 2147483647, ParameterDirection.Input, true, 0, 0, serviceCategory);
		}

		/// <summary>Creates the call object for the call 'SpServiceDel' to stored procedure 'SpServiceDel'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="serviceId">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpServiceDelCall(IDataAccessCore dataAccessProvider, System.Int32 serviceId)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpServiceDel]", "SpServiceDel")
							.AddParameter("@ServiceId", "Int", 0, ParameterDirection.Input, true, 10, 0, serviceId);
		}

		/// <summary>Creates the call object for the call 'SpServiceIns' to stored procedure 'spServiceIns'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="service">Input parameter</param>
		/// <param name="serviceId">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpServiceInsCall(IDataAccessCore dataAccessProvider, System.String service, System.Int32 serviceId)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[spServiceIns]", "SpServiceIns")
							.AddParameter("@Service", "VarChar", 2147483647, ParameterDirection.Input, true, 0, 0, service)
							.AddParameter("@ServiceId", "Int", 0, ParameterDirection.InputOutput, true, 10, 0, serviceId);
		}

		/// <summary>Creates the call object for the call 'SpServiceUpd' to stored procedure 'SpServiceUpd'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="service">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpServiceUpdCall(IDataAccessCore dataAccessProvider, System.String service)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpServiceUpd]", "SpServiceUpd")
							.AddParameter("@Service", "VarChar", 2147483647, ParameterDirection.Input, true, 0, 0, service);
		}

		/// <summary>Creates the call object for the call 'SpTransactionDel' to stored procedure 'SpTransactionDel'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="transactionId">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpTransactionDelCall(IDataAccessCore dataAccessProvider, System.Int32 transactionId)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpTransactionDel]", "SpTransactionDel")
							.AddParameter("@TransactionId", "Int", 0, ParameterDirection.Input, true, 10, 0, transactionId);
		}

		/// <summary>Creates the call object for the call 'SpTransactionIns' to stored procedure 'SpTransactionIns'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="reservationId">Input parameter</param>
		/// <param name="transactionId">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpTransactionInsCall(IDataAccessCore dataAccessProvider, System.Int32 reservationId, System.Int32 transactionId)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpTransactionIns]", "SpTransactionIns")
							.AddParameter("@ReservationId", "Int", 0, ParameterDirection.Input, true, 10, 0, reservationId)
							.AddParameter("@TransactionId", "Int", 0, ParameterDirection.InputOutput, true, 10, 0, transactionId);
		}

		/// <summary>Creates the call object for the call 'SpTransactionUpd' to stored procedure 'SpTransactionUpd'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="transaction">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpTransactionUpdCall(IDataAccessCore dataAccessProvider, System.String transaction)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HARS_Susmita].[dbo].[SpTransactionUpd]", "SpTransactionUpd")
							.AddParameter("@Transaction", "VarChar", 2147483647, ParameterDirection.Input, true, 0, 0, transaction);
		}


	}
}
